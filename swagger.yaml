openapi: 3.0.0
info:
  title: Multi-Tenant API
  version: 1.0.0
  description: API for managing users, orders, and products in a multi-tenant environment.
servers:
  - url: http://127.0.0.1:8000/api
    description: Local development server
paths:
  /register:
    post:
      summary: Register a new user
      description: Register a new user and create a tenant if it doesn't exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      summary: Login a user
      description: Authenticate a user and return an access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders:
    post:
      summary: Create a new order
      description: Create a new order for the authenticated user's tenant.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: List all orders
      description: Retrieve all orders for the authenticated user's tenant.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products:
    get:
      summary: List all products
      description: Retrieve all products for the authenticated user's tenant.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new product
      description: Create a new product for the authenticated user's tenant.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    put:
      summary: Update a product
      description: Update a product for the authenticated user's tenant.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a product
      description: Delete a product for the authenticated user's tenant.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        tenant_name:
          type: string
          example: "Tenant A"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          example: "password123"
      required:
        - tenant_name
        - name
        - email
        - password

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          example: "password123"
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "John Doe"
            email:
              type: string
              example: "john.doe@example.com"

    StoreOrderRequest:
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
      required:
        - product_id
        - quantity

    ProductRequest:
      type: object
      properties:
        name:
          type: string
          example: "Product A"
        description:
          type: string
          example: "A sample product"
        price:
          type: number
          format: float
          example: 99.99
        stock_quantity:
          type: integer
          example: 10
      required:
        - name
        - price

    SuccessResponse:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
          example: "Success"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Error message"
        errors:
          type: object
          example: { "field": ["Error message"] }

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
